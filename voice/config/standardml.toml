title_contexts = [".sml"]
function_prefix = "fun"
template_prefix = "template"

[monads]
"absolute" = "abs"
"char is upper" = "Char.isUpper"
"divide" = "div"
"list map" = "List.map"
"list length" = "List.length"
"list filter" = "List.filter"
"list reduce" = "List.reduce"
"list fold [left]" = "List.foldl"
"string sub" = "String.sub"
"string size" = "String.size"
"string explode" = "String.explode"
"string implode" = "String.implode"
"tail" = "tl"
"head" = "hd"
"null" = "null"
"not" = "not"
"reverse" = "rev"
"is some" = "isSome"
"some" = "SOME"
"value of" = "valOf"

[functions]
"test" = "test"

[commands]
"use file" = ['use "";', "left"]
"function" = ["fun  =", "left:2"]
"assign" = " = "
"anonymous" = ["fn  => ", "left:4"]
"cons onto" = " :: "
"case of" = ["case  of", "left:3"]
"lodge and"          = " andalso "
"lodge or"          = " orelse "
"lodge else"          = "else "
"lodge if"            = "if "
"lodge in"            = "in "
"lodge then"            = "then "
"lodge let"            = "let "
"lodge end"            = "end"
"prime" = "'"
"semi" = ["", "end, semicolon"]
"right arrow" = " => "
"type is" = " : "
"value false"         = "false"
"value true"          = "true"
"value none"          = "NONE"
"valley" = "val "

[types]
"int" = "int"
"string" = "string"
"bool" = "bool"
"list" = "list"

[templates]
